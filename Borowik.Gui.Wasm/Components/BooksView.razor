@using Borowik.Books.Entities
@using Borowik.Books.Contracts

@if (Bookshelf is null)
{
    <Progress Visible></Progress>
    return;
}

<Div Flex="Flex.JustifyContent.End" Padding="Padding.Is3">
    <Dropdown>
        <DropdownToggle Color="Color.Primary">
            @Bookshelf?.SortMode
        </DropdownToggle>
        <DropdownMenu>
            @foreach (var sortMode in Enum.GetValues<BooksSortMode>())
            {
                <DropdownItem Clicked="() => SetSortModeAsync(sortMode)">@sortMode</DropdownItem>
            }
        </DropdownMenu>
    </Dropdown>
</Div>

<Div Flex="Flex.Wrap.JustifyContent.Center" Padding="Padding.Is3">
    @foreach (var book in OrderBooks())
    {
        <Column ColumnSize="ColumnSize.Is3.OnFullHD.Is4.OnWidescreen.Is6.OnTablet.Is12.OnMobile">
            <Button Type="ButtonType.Link" To="@($"/Book/{book.Id}")">
                <Card Class="book-card">
                    <CardImage Source="@($"https://picsum.photos/seed/{book.Id}/1024")"/>
                    <Progress Border="Border.RoundedZero" Value="@(Random.Shared.Next(1, 90))" Size="Size.Small"></Progress>
                    <CardBody>
                        <CardTitle Size="3">@book.Metadata.Title</CardTitle>
                        <CardSubtitle>@book.Metadata.Author</CardSubtitle>
                    </CardBody>
                </Card>
            </Button>
        </Column>
    }

    <Column ColumnSize="ColumnSize.Is3.OnFullHD.Is4.OnWidescreen.Is6.OnTablet.Is12.OnMobile">
        <Button Clicked="OpenImportBookModalAsync">
            <Card>
                <CardImage Source="https://picsum.photos/seed/null/1024"/>
                <CardBody>
                    <CardTitle Size="3">New book</CardTitle>
                    <CardSubtitle>Import new book</CardSubtitle>
                </CardBody>
            </Card>
        </Button>
    </Column>
</Div>

<ImportBookModal Bookshelf="Bookshelf" BookImported="BooksChanged" @ref="_importBookModal"/>

@code
{
    [Parameter]
    [EditorRequired]
    public BookshelfWithBooks? Bookshelf { get; set; }

    [Parameter]
    public EventCallback BooksChanged { get; set; }

    [Inject]
    private IExceptionHandler ExceptionHandler { get; init; } = null!;

    [Inject]
    private IBorowikManager BorowikManager { get; init; } = null!;

    [Inject]
    private ILoadingIndicatorService LoadingIndicatorService { get; init; } = null!;

    private ImportBookModal _importBookModal = null!;

    private async Task OpenImportBookModalAsync()
    {
        await _importBookModal.ShowAsync();
    }

    private IEnumerable<Book> OrderBooks()
    {
        if (Bookshelf is null || Bookshelf.Books.Length == 0)
            return Enumerable.Empty<Book>();

        var books = Bookshelf.Books;

        return Bookshelf.SortMode switch
        {
            BooksSortMode.LastOpenedAscending => books.OrderBy(b => b.LastOpenedAt),
            BooksSortMode.LastOpenedDescending => books.OrderByDescending(b => b.LastOpenedAt),
            BooksSortMode.ImportedAtAscending => books.OrderBy(b => b.ImportedAt),
            BooksSortMode.ImportedAtDescending => books.OrderByDescending(b => b.ImportedAt),
            BooksSortMode.NameAscending => books.OrderBy(b => b.Metadata.Title),
            BooksSortMode.NameDescending => books.OrderByDescending(b => b.Metadata.Title),
            BooksSortMode.AuthorAscending => books.OrderBy(b => b.Metadata.Author),
            BooksSortMode.AuthorDescending => books.OrderByDescending(b => b.Metadata.Author),
            _ => throw new InvalidOperationException($"Not supported sort mode '{Bookshelf.SortMode}'")
            };
    }

    private async Task SetSortModeAsync(BooksSortMode sortMode)
    {
        if (Bookshelf is null)
            return;

        await LoadingIndicatorService.Show();

        await ExceptionHandler.HandleAsync(() =>
            BorowikManager.SendRequestAsync(new SetBooksSortModeRequest(Bookshelf.Id, sortMode)));

        Bookshelf = Bookshelf with { SortMode = sortMode };

        await LoadingIndicatorService.Hide();
    }
}