@using Color = Blazorise.Color
@using Borowik.Books.Entities
@using Borowik.Books.Contracts
@using System.Drawing

<Modal @ref="_modal">
    <ModalContent>
        <ModalHeader>
            <ModalTitle Size="HeadingSize.Is4">Edit Book</ModalTitle>
            <CloseButton/>
        </ModalHeader>
        <ModalBody>
            <Validations @ref="_validations" Mode="ValidationMode.Manual" Model="@_model" HandlerType="typeof(FluentValidationHandler)">
                <Validation>
                    <Field>
                        <FieldLabel><Text Italic="@(_model?.Title is not null)">Title</Text></FieldLabel>
                        <FieldBody>
                            <TextEdit Placeholder="@Book?.Metadata.Title" @bind-Text="@_model.Title">
                                <Feedback>
                                    <ValidationError/>
                                </Feedback>
                            </TextEdit>
                        </FieldBody>
                    </Field>
                </Validation>
                <Validation>
                    <Field>
                        <FieldLabel><Text Italic="@(_model?.Author is not null)">Author</Text></FieldLabel>
                        <FieldBody>
                            <TextEdit Placeholder="@Book?.Metadata.Author" @bind-Text="@_model.Author">
                                <Feedback>
                                    <ValidationError/>
                                </Feedback>
                            </TextEdit>
                        </FieldBody>
                    </Field>
                </Validation>
            </Validations>
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Primary" Type="ButtonType.Submit" PreventDefaultOnSubmit Clicked="SaveAsync">Save</Button>
        </ModalFooter>
    </ModalContent>
</Modal>

@code {

    [Parameter]
    [EditorRequired]
    public Book? Book { get; set; }

    [Parameter]
    public EventCallback BookUpdated { get; set; }

    [Inject]
    private IBorowikManager BorowikManager { get; init; } = null!;

    private Modal _modal = null!;
    private Validations _validations = null!;
    private EditBookModel _model = new();

    public async Task ShowAsync()
    {
        await _modal.Show();
    }

    private async Task SaveAsync()
    {
        if (Book is null)
            return;

        if (!await _validations.ValidateAll())
            return;

        await BorowikManager.SendRequestAsync(
                new UpdateBookRequest(Book.Id, _model.Title, _model.Author), CancellationToken.None);

        await _modal.Close(CloseReason.UserClosing);
        await BookUpdated.InvokeAsync();

        _model = new EditBookModel();
        await _validations.ClearAll();
    }
}