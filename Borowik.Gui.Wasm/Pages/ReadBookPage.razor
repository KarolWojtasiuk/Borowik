@page "/Book/{bookId:guid}"
@using Borowik.Books.Entities
@using Borowik.Books.Contracts
@using Borowik.Books

<DisplayHeading>@_book?.Metadata.Title</DisplayHeading>

<Pagination Flex="Flex.Wrap.JustifyContent.Center">
    @if (_numberedPages.Length > MaxPagesAround + 1)
    {
        <PaginationItem Disabled="_selectedPage == 0">
            <PaginationLink Clicked="() => _selectedPage = 0">@("<<")</PaginationLink>
        </PaginationItem>
    }

    @foreach (var page in GetClampedPages())
    {
        <PaginationItem Active="_selectedPage == page.Number">
            <PaginationLink Clicked="() => _selectedPage = page.Number">@(page.Number + 1)</PaginationLink>
        </PaginationItem>
    }

    @if (_numberedPages.Length > MaxPagesAround + 1)
    {
        <PaginationItem Disabled="_selectedPage == _numberedPages.Length - 1">
            <PaginationLink Clicked="() => _selectedPage = _numberedPages.Length - 1">>></PaginationLink>
        </PaginationItem>
    }
</Pagination>

<Div Flex="Flex.JustifyContent.Center">
    @RenderSelectedPage()
</Div>

@code
{
    private const int MaxPagesAround = 14;

    [Parameter]
    public Guid BookId { get; set; }

    [Inject]
    private IBorowikManager BorowikManager { get; init; } = null!;

    [Inject]
    private ILoadingIndicatorService LoadingIndicatorService { get; init; } = null!;

    [Inject]
    private INotificationService NotificationService { get; init; } = null!;

    [Inject]
    private NavigationManager NavigationManager { get; init; } = null!;

    private Book? _book;
    private BookContent? _content;

    private (int Number, BookContentPage Page)[] _numberedPages = Array.Empty<(int, BookContentPage)>();
    private int _selectedPage;

    protected override async Task OnParametersSetAsync()
    {
        await LoadBookAsync();
    }

    private async Task LoadBookAsync()
    {
        await LoadingIndicatorService.Show();

        try
        {
            var response = await BorowikManager.SendRequestAsync(new OpenBookRequest(BookId), CancellationToken.None);
            _book = response.Book;
            _content = response.Content;
            _numberedPages = response.Content.Pages.Select((p, i) => (i, p)).OrderBy(p => p.i).ToArray();
        }
        catch (BookExceptions.BookNotFoundException e)
        {
            await NotificationService.Error(e.Message, "Error");
            NavigationManager.NavigateTo("/");
        }
        finally
        {
            await LoadingIndicatorService.Hide();
        }
    }

    private IEnumerable<(int Number, BookContentPage Page)> GetClampedPages()
    {
        if (_numberedPages.Length <= MaxPagesAround + 1)
            return _numberedPages;

        var firstPage = 0;
        var lastPage = _numberedPages.Length - 1;

        var from = _selectedPage - MaxPagesAround / 2;
        var to = _selectedPage + MaxPagesAround / 2;

        if (from < firstPage)
        {
            to += firstPage - from;
            from = firstPage;
        }

        if (to > lastPage)
        {
            from -= to - lastPage;
            to = lastPage;
        }

        return _numberedPages[from..(to + 1)]; // range end is exclusive
    }

    private RenderFragment RenderSelectedPage() => builder =>
    {
        if (_content is null || _content.Pages.Length < _selectedPage)
            return;

        foreach (var node in _content.Pages[_selectedPage].Nodes)
            RenderNode(node).Invoke(builder);
    };

    private static RenderFragment RenderNode(IBookContentNode node) => builder =>
    {
        if (node is BookContentNodes.PlainTextNode plainTextNode)
        {
            builder.OpenComponent<Text>(0);
            builder.AddContent(1, plainTextNode.Value);
            builder.CloseComponent();
        }

        if (node is BookContentNodes.ImageNode imageNode)
        {
            builder.OpenComponent<Image>(0);
            builder.AddAttribute(1, nameof(Image.Source), $"data:{imageNode.Value.MimeType};base64,{Convert.ToBase64String(imageNode.Value.Data)}");
            builder.CloseComponent();
        }
    };
}